import pytest
from aiogram.types import Message, CallbackQuery
from bot_handlers.start_handler import start_command
from bot_handlers.commands_handler import help_command, info_command
from bot_handlers.github_handler import get_github_repos, create_github_repo, receive_repo_name
from bot_handlers.jenkins_handler import jenkins_build, jenkins_status, jenkins_logs
from bot_handlers.trello_handler import trello_create_card, receive_card_name, trello_update_card

# üìå –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start
@pytest.mark.asyncio
async def test_start_command():
    message = Message(message_id=1, chat={"id": 123}, text="/start")
    response = await start_command(message)
    assert response.text == "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Telegram-–±–æ—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"

# üìå –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help
@pytest.mark.asyncio
async def test_help_command():
    message = Message(message_id=2, chat={"id": 123}, text="/help")
    response = await help_command(message)
    assert "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥" in response.text

# üìå –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /info
@pytest.mark.asyncio
async def test_info_command():
    message = Message(message_id=3, chat={"id": 123}, text="/info")
    response = await info_command(message)
    assert "–≠—Ç–æ—Ç –±–æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å API —Å–µ—Ä–≤–∏—Å–∞–º–∏ GitHub, Jenkins –∏ Trello." in response.text

# üìå –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /github_repos (—Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤)
@pytest.mark.asyncio
async def test_get_github_repos(mocker):
    mocker.patch("requests.get", return_value=mocker.Mock(status_code=200, json=lambda: [{"name": "repo1"}, {"name": "repo2"}]))

    message = Message(message_id=4, chat={"id": 123}, text="/github_repos")
    response = await get_github_repos(message)
    assert "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:" in response.text

# üìå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (GitHub)
@pytest.mark.asyncio
async def test_create_github_repo(mocker):
    mocker.patch("requests.post", return_value=mocker.Mock(status_code=201))

    message = Message(message_id=5, chat={"id": 123}, text="test-repo")
    response = await receive_repo_name(message)
    assert "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π 'test-repo' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!" in response.text



# üìå –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /trello_create_card (—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ Trello)
@pytest.mark.asyncio
async def test_trello_create_card(mocker):
    mocker.patch("requests.post", return_value=mocker.Mock(status_code=201))

    message = Message(message_id=9, chat={"id": 123}, text="New Trello Card")
    response = await receive_card_name(message)
    assert "‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ **New Trello Card** —Å–æ–∑–¥–∞–Ω–∞!" in response.text

# üìå –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /trello_update_card (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ Trello)
@pytest.mark.asyncio
async def test_trello_update_card(mocker):
    mocker.patch("requests.put", return_value=mocker.Mock(status_code=200))

    message = Message(message_id=10, chat={"id": 123}, text="card123 done")
    response = await trello_update_card(message)
    assert "‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ card123 –æ–±–Ω–æ–≤–ª–µ–Ω–∞" in response.text

