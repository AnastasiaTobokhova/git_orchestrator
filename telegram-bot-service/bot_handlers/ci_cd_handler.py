from aiogram import Router, types, F
import requests
import os
from config import config, logger
import aiohttp

router = Router()

GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_USER = os.getenv("GITHUB_USER")
GITHUB_API_URL = "https://api.github.com"


# üöÄ –¢—Ä–∏–≥–≥–µ—Ä GitHub Actions
@router.message(F.text == "/ci_cd_trigger")
async def trigger_github_actions(message: types.Message, repo_name: str):
    headers = {"Authorization": f"token {GITHUB_TOKEN}", "Accept": "application/vnd.github.v3+json"}
    workflow_url = f"https://api.github.com/repos/AnastasiaTobokhova/{repo_name}/actions/workflows/ci_cd.yml/dispatches"

    data = {"ref": "main"}
    response = requests.post(workflow_url, json=data, headers=headers)

    if response.status_code == 204:
        await message.answer(f"‚úÖ GitHub Actions —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {repo_name}!")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GitHub Actions: {response.json()}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GitHub Actions.")

# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ GitHub Actions
@router.message(F.text == "/ci_cd_status")
async def github_actions_status(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:")

@router.message(F.text)
async def github_actions_status(message: types.Message):
    headers = {"Authorization": f"Bearer {GITHUB_TOKEN}"}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(
            f"{GITHUB_API_URL}/repos/AnastasiaTobokhova/test_deploy/actions/runs",
            headers=headers
        ) as resp:
            if resp.status == 200:
                data = await resp.json()
                if data["workflow_runs"]:
                    last_run = data["workflow_runs"][0]
                    status = last_run["status"]
                    conclusion = last_run.get("conclusion", "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
                    await message.answer(f"üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–±–æ—Ä–∫–∏: **{status}**\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: **{conclusion}**")
                else:
                    await message.answer("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö workflow.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")

# üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ GitHub Actions
@router.message(F.text == "/ci_cd_logs")
async def github_actions_logs(message: types.Message):
    headers = {"Authorization": f"Bearer {GITHUB_TOKEN}"}

    async with aiohttp.ClientSession() as session:
        async with session.get(
            f"{GITHUB_API_URL}/repos/AnastasiaTobokhova/test_deploy/actions/runs",
            headers=headers
        ) as resp:
            if resp.status == 200:
                data = await resp.json()
                if data["workflow_runs"]:
                    last_run = data["workflow_runs"][0]
                    log_url = last_run["logs_url"]
                    await message.answer(f"üìù –õ–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–±–æ—Ä–∫–∏: [–°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏]({log_url})")
                else:
                    await message.answer("‚ö†Ô∏è –ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤.")

