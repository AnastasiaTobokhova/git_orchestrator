import requests
from fastapi import APIRouter, HTTPException
from config import config,logger

router = APIRouter(prefix="/github", tags=["GitHub"])

HEADERS = {"Authorization": f"token {config.GITHUB_TOKEN}"}

# üî¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
@router.get("/repositories")
async def get_repositories():
    url = f"{config.GITHUB_API_URL}/user/repos"
    response = requests.get(url, headers=HEADERS)

    if response.status_code == 200:
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
        return response.json()
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {response.json()}")
    raise HTTPException(status_code=response.status_code, detail=response.json())

# ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
@router.post("/create_repo")
async def create_repository(repo_name: str):
    url = f"{config.GITHUB_API_URL}/user/repos"
    data = {"name": repo_name, "private": False}
    response = requests.post(url, json=data, headers=HEADERS)

    if response.status_code == 201:
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        return {"message": "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", "repo": response.json()}
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {response.json()}")
    raise HTTPException(status_code=response.status_code, detail=response.json())

# ‚úâÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á (issues)
@router.post("/create_issue")
async def create_issue(repo: str, title: str, body: str = ""):
    url = f"{config.GITHUB_API_URL}/repos/YOUR_GITHUB_USERNAME/{repo}/issues"
    data = {"title": title, "body": body}
    response = requests.post(url, json=data, headers=HEADERS)

    if response.status_code == 201:
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞")
        return {"message": "Issue —Å–æ–∑–¥–∞–Ω–æ", "issue": response.json()}
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {response.json()}")
    raise HTTPException(status_code=response.status_code, detail=response.json())

# üåü –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
@router.get("/repo_analytics/{repo}")
async def repo_analytics(repo: str):
    url = f"{config.GITHUB_API_URL}/repos/YOUR_GITHUB_USERNAME/{repo}"
    response = requests.get(url, headers=HEADERS)

    if response.status_code == 200:
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        data = response.json()
        return {
            "stars": data["stargazers_count"],
            "forks": data["forks_count"],
            "views": "–î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—É–±–ª–∏—á–Ω–æ–º API"
        }
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {response.json()}")
    raise HTTPException(status_code=response.status_code, detail=response.json())

# üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Pull Requests
@router.get("/pull_requests/{repo}")
async def get_pull_requests(repo: str):
    url = f"{config.GITHUB_API_URL}/repos/YOUR_GITHUB_USERNAME/{repo}/pulls"
    response = requests.get(url, headers=HEADERS)

    if response.status_code == 200:
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ pull request")
        return response.json()
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ pull request: {response.json()}")
    raise HTTPException(status_code=response.status_code, detail=response.json())
